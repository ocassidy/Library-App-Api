version: 2
jobs:
  build-test:
    environment:
      _JAVA_OPTIONS: '-Xmx3g'
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2'
    docker:
      - image: circleci/openjdk:11.0.2-jdk
      - image: circleci/postgres:9.6.9
        environment:
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: finalYearAppProject

    working_directory: ~/repo

    steps:
      - checkout
      - run: sudo chmod +x ./gradlew
      - run: sudo rm -rf /var/lib/apt/lists/* && sudo apt update
      - run: sudo apt-get install postgresql-client-9.6
      - run: |
          psql -h 127.0.0.1 -U postgres -c "CREATE DATABASE library_db_test;"
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run: gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run: gradle clean test

      - run:
          name: Assemble JAR
          command: |
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
      - store_artifacts:
          path: build/libs
  deploy-integration:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_INTEGRATION_APP_NAME.git master
  deploy-staging:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_STAGING_APP_NAME.git master
workflows:
  version: 2
  build-deploy:
    jobs:
      - build-test
      - deploy-integration:
          - requires:
              - build-test
      - deploy-staging:
          requires:
            - build-test
            - deploy-integration
          filters:
            branches:
              only: master
